name: Handle CodeQL Scan Results

on:
  # pull_request: 
  #   types: [opened, reopened]
  workflow_run:
    # workflows: ["CodeQL"]
    workflows: ["CodeQL test"]
    types:
      - completed

jobs:
  handle_codeql_scan:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && toJSON(github.event.workflow_run.pull_requests) != '[]' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare Environment
        run: |
          
          # ls -lah
          env
          echo "github.event_name" is ${{ github.event_name }}
          echo "github.event.workflow_run.event" is ${{ github.event.workflow_run.event }}
          echo "github.event.workflow_run.conclusion" is ${{ github.event.workflow_run.conclusion }}
          echo "github.event.workflow_run.head_sha" is ${{ github.event.workflow_run.head_sha }}
          echo "github.event.workflow_run.head_commit.id" is ${{ github.event.workflow_run.head_commit.id }}
          echo "github.event.workflow_run.triggering_actor.url" is ${{ github.event.workflow_run.url }} 
          echo "github.event.workflow_run.pull_requests" is ${{ github.event.workflow_run.pull_requests }} 
          echo "github.event.workflow_run.pull_requests.head.sha" is ${{ github.event.workflow_run.pull_requests.head.sha }} 
          echo "github.event.workflow_run.pull_requests.head.sha" is ${{ github.event.workflow_run.pull_requests.head.sha }} 

          echo "$PR_CONTEXT"


          URL=$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/code-scanning/analyses
          response=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" $URL)
          ids=$(echo "$response" | jq -r --arg sha "$head_sha" '.[] | select(.commit_sha == $sha) | .id')
          
          # Initialize sarif_output.json with the base structure
          echo '{
          	"runs": [],
          	"version": "2.1.0"
          }' > sarif_output.json
          
          # Loop through each ID
          for id in $ids; do
            echo "Found Analysis ID: $id"
          
            # Fetch the SARIF response
            sarif_response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/sarif+json" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/code-scanning/analyses/$id")
            
            # Save the response to a temporary file
            echo "$sarif_response" > current_sarif.json
          
            # Combine the current sarif_output.json with the new SARIF response
            jq -s '{"version": "2.1.0", "runs": (.[0].runs + .[1].runs)}' sarif_output.json current_sarif.json > temp_sarif_output.json
          
            # Move the temporary file to sarif_output.json
            mv temp_sarif_output.json sarif_output.json
          
          done

          ls -l
          cat sarif_output.json

          
         
          
        env:
            PR_CONTEXT: ${{ toJson(github.event.workflow_run.pull_requests) }}
            
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

